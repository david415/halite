
#ifndef MESSAGE_IMPLMENTATION_H
#define MESSAGE_IMPLMENTATION_H

#include <stdint.h>
#include <string.h>

struct TaggedField_builder { uint64_t tag ; char* data ; } ;

static inline size_t build_TaggedField ( char* data, size_t length, struct TaggedField_builder* builder_data ) ;

size_t static inline compute_TaggedField_length ( struct TaggedField_builder* builder ) ;

{{#types}}
typedef struct {{message}}_ {} {{message}} ;
static const uint64_t {{message}}_tag = 0x{{tag}} ;
{{/types}}

{{#types}}
struct {{message}}_builder ;
{{/types}}

{{#types}}
struct {{message}}_builder { {{#fields}}{{#is_composite}}
  struct {{typeName}}_builder*{{array}} {{field}} ;{{/is_composite}}{{^is_composite}}
  {{type}} {{array}}{{field}} ;{{/is_composite}}{{^is_fixed}}
  size_t {{field}}_length ;{{/is_fixed}}{{/fields}}
} ;

static inline size_t build_{{message}} ( char* data, size_t length, struct {{message}}_builder* builder_data ) ;

size_t static inline compute_{{message}}_length ( struct {{message}}_builder* builder ) ;

{{/types}}
{{#types}}

/***** type {{message}} *****/

{{#is_fixed}}
size_t static inline {{message}}_length ( {{message}}* data ) {
    return {{width}} ;
}


size_t static inline compute_{{message}}_length ( struct {{message}}_builder* builder ) {
    return {{width}} ;
}
{{/is_fixed}}
{{^is_fixed}}
size_t static inline {{message}}_length ( {{message}}* data ) {
    return (size_t)((uint32_t*)data)[ 0 ] ;
}

size_t static inline compute_{{message}}_length ( struct {{message}}_builder* builder ) {

    size_t length = {{width}} ;
{{#fields}}
{{#is_repeated}}
    size_t {{message}}_length = builder->{{message}}_length ;

    for ( int i = 0 ; i < {{message}}_length ; i++ ) {
        if ( builder->{{message}}[i] != NULL )
            length += compute_{{type}}_length( builder->{{message}}[i] ) ;
    }
{{/is_repeated}}
{{#is_composite}}{{^is_fixed}}
    if ( builder->{{message}} != NULL ) length += compute_{{typeName}}_length( builder->{{field}} ) ;
{{/is_fixed}}{{/is_composite}}
{{#is_plane}}{{^is_fixed}}    length += builder->{{field}}_length ; 
{{/is_fixed}}{{/is_plane}}
{{/fields}}    return length;
}
{{/is_fixed}}
{{#fields}}{{#is_fixed}}
static inline {{type}} {{message}}_read_{{field}} ( {{message}}* data ) {
    return ({{use}}{{type}}{{use}})( ((char*)data) + {{offset}} ) ;
}

static inline size_t {{message}}_length_{{field}} ( {{message}}* data ) {
    return {{width}};
}

static inline size_t {{message}}_end_{{field}} ( {{message}}* data ) {
    return {{offset}} + {{width}};
}
{{/is_fixed}}{{/fields}}{{#fields}}{{#is_first}}{{#is_repeated}}
static inline size_t {{message}}_end_{{field}} ( {{message}}* data, uint32_t index ) {
    size_t   message_length = {{message}}_length( data ) ;
    uint32_t count          = *(uint32_t*)( ((char*)data) + {{offset}} ) ;

    if ( index >= count )
        return 0 ;

    if ( ( {{offset}} + ( index * sizeof( uint32_t ) ) + sizeof( uint32_t ) ) > message_length )
        return 0 ;
        
    return (size_t)( ((uint32_t*)(((char*)data) + {{offset}} ))[ index ] ) ;
}


static inline size_t {{message}}_start_{{field}} ( {{message}}* data, uint32_t index ) {
    size_t   result ;
    size_t   message_length = {{message}}_length( data ) ;
    uint32_t count          = *(uint32_t*)( ((char*)data) + {{offset}} ) ;

    if ( index >= count )
        return 0 ;

    if ( ( {{offset}} + ( index * sizeof( uint32_t ) ) + sizeof( uint32_t ) ) > message_length )
        return 0 ;

    if ( index == 0 )
        result = {{offset}} + sizeof( uint32_t ) + ( sizeof( uint32_t ) * count ) ;

    else
        result = ((uint32_t*)(((char*)data) + {{offset}} ))[ index - 1 ] ;

    return result ;
}


static inline {{type}} {{message}}_read_{{field}} ( {{message}}* data, uint32_t index ) {
    size_t message_length = {{message}}_length( data ) ;
    size_t field_end      = {{message}}_end_{{field}}( data, index ) ;
    size_t field_start    = {{message}}_start_{{field}}( data, index ) ;

    if ( (field_end > message_length) || (field_start == 0) || (field_end == 0) )
        return NULL ;

   return {{use}}({{type}}{{use}})( ((char*)data) + field_start ) ;
}


static inline size_t {{message}}_length_{{field}} ( {{message}}* data, uint32_t index ) {
    size_t field_end   = {{message}}_end_{{field}}( data, index ) ;
    size_t field_start = {{message}}_start_{{field}}( data, index ) ;

    if ( field_start == 0 || field_end == 0 )
        return 0 ;

    return field_end - field_start ;
}
{{/is_repeated}}{{/is_first}}{{/fields}}{{#fields}}{{#is_first}}{{#is_tagged}}
static inline size_t {{message}}_end_{{field}} ( {{message}}* data ) {
    return (size_t)( ((uint32_t*)data)[ {{index}} ] );
}


static inline char* {{message}}_read_{{field}} ( {{message}}* data ) {
    size_t message_length = {{message}}_length( data ) ;
    size_t field_end      = {{message}}_end_{{field}}( data ) ;

    if ( field_end > message_length )
        return NULL ;

    return  ((char*)data) + {{offset}} + sizeof( uint64_t ) ;
}


static inline uint64_t {{message}}_readTag_{{field}} ( {{message}}* data ) {
    return *(uint64_t*)( ((char*)data) + {{offset}} ) ;
}


static inline size_t {{message}}_length_{{field}} ( {{message}}* data ) {
    return (size_t)( ((uint32_t*)data)[ {{index}} ] - {{offset}} );
}

{{/is_tagged}}{{/is_first}}{{/fields}}{{#fields}}{{#is_first}}{{^is_fixed}}
static inline size_t {{message}}_end_{{field}} ( {{message}}* data ) {
    return (size_t)( ((uint32_t*)data)[ {{index}} ] );
}

static inline {{type}} {{message}}_read_{{field}} ( {{message}}* data ) {
    size_t message_length = {{message}}_length( data ) ;
    size_t field_end      = {{message}}_end_{{field}}( data ) ;

    if ( field_end > message_length )
        return NULL ;

    return {{use}}({{type}}{{use}})( ((char*)data) + {{offset}} ) ;
}

static inline size_t {{message}}_length_{{field}} ( {{message}}* data ) {
    return (size_t)( ((uint32_t*)data)[ {{index}} ] - {{offset}} );
}

{{/is_fixed}}{{/is_first}}{{/fields}}
{{#fields}}{{^is_first}}{{#is_repeated}}
static inline size_t {{message}}_end_{{field}} ( {{message}}* data, uint32_t index ) {
    size_t   message_length = {{message}}_length( data ) ;
    uint32_t field_start    = ((uint32_t*)data)[ {{index}} + 1 ] ;
    uint32_t count          = *(uint32_t*)( ((char*)data) + field_start ) ;

    if ( index >= count )
        return 0 ;

    if ( ( field_start + ( index * sizeof( uint32_t ) ) + sizeof( uint32_t ) ) > message_length )
        return 0 ;
        
    return (size_t)( ((uint32_t*)(((char*)data) + field_start ))[ index ] ) ;
}


static inline size_t {{message}}_start_{{field}} ( {{message}}* data, uint32_t index ) {
    size_t   result ;
    size_t   message_length = {{message}}_length( data ) ;
    uint32_t field_start    = ((uint32_t*)data)[ {{index}} + 1 ] ;
    uint32_t count          = *(uint32_t*)( ((char*)data) + field_start ) ;

    if ( index >= count )
        return 0 ;

    if ( ( field_start + ( index * sizeof( uint32_t ) ) + sizeof( uint32_t ) ) > message_length )
        return 0 ;


    if ( index == 0 )
        result = field_start + sizeof( uint32_t ) + ( sizeof( uint32_t ) * count ) ;

    else
        result = ((uint32_t*)(((char*)data) + field_start ))[ index - 1 ] ;

    return result ;
}


static inline {{type}} {{message}}_read_{{field}} ( {{message}}* data, uint32_t index ) {
    size_t message_length = {{message}}_length( data ) ;
    size_t field_end      = {{message}}_end_{{field}}( data, index ) ;
    size_t field_start    = {{message}}_start_{{field}}( data, index ) ;

    if ( field_end > message_length || field_start == 0 || field_end == 0 )
        return NULL ;

   return {{use}}({{type}}{{use}})( ((char*)data) + field_start ) ;
}


static inline size_t {{message}}_length_{{field}} ( {{message}}* data, uint32_t index ) {
    size_t field_end   = {{message}}_end_{{field}}( data, index ) ;
    size_t field_start = {{message}}_start_{{field}}( data, index ) ;

    if ( field_start == 0 || field_end == 0 )
        return 0 ;

    return field_end - field_start ;
}
{{/is_repeated}}{{/is_first}}{{/fields}}
{{#fields}}{{^is_first}}{{#is_tagged}}
static inline size_t {{message}}_end_{{field}} ( {{message}}* data ) {
    return (size_t)( ((uint32_t*)data)[ {{index}} ] );
}

static inline char* {{message}}_read_{{field}} ( {{message}}* data ) {
    size_t message_length = {{message}}_length( data ) ;
    size_t field_end      = {{message}}_end_{{field}}( data ) ;

    if ( field_end > message_length )
        return NULL ;

    return ((char*)data) + sizeof(uint64_t) + ((uint32_t*)data)[ {{index}} + 1 ] ;
}

static inline uint64_t {{message}}_readTag_{{field}} ( {{message}}* data ) {
    return *(uint64_t*)( ((char*)data) + ((uint32_t*)data)[ {{index}} + 1 ] );
}

static inline size_t {{message}}_length_{{field}} ( {{message}}* data ) {
    return (size_t)( ((uint32_t*)data)[ {{index}} ] - ((uint32_t*)data)[ {{index}} + 1 ] );
}
{{/is_tagged}}{{/is_first}}{{/fields}}
{{#fields}}{{^is_first}}{{^is_fixed}}
static inline size_t {{message}}_end_{{field}} ( {{message}}* data ) {
    return (size_t)( ((uint32_t*)data)[ {{index}} ] );
}

static inline {{type}} {{message}}_read_{{field}} ( {{message}}* data ) {
    size_t message_length = {{message}}_length( data ) ;
    size_t field_end      = {{message}}_end_{{field}}( data ) ;

    if ( field_end > message_length )
        return NULL ;

    return {{use}}({{type}}{{use}})( ((char*)data) + ((uint32_t*)data)[ {{index}} + 1 ]  ) ;
}

static inline size_t {{message}}_length_{{field}} ( {{message}}* data ) {
    return (size_t)( ((uint32_t*)data)[ {{index}} ] - ((uint32_t*)data)[ {{index}} + 1 ] );
}{{/is_fixed}}{{/is_first}}{{/fields}}

static inline size_t build_{{message}} ( char* data, size_t length, struct {{message}}_builder* builder_data ) {
{{#has_composite}}
    size_t wrote ;
{{/has_composite}}

    size_t current_offset = {{width}} ;

    if ( length < {{width}} )
        return 0 ;

{{#fields}}{{#is_fixed}}{{^is_composite}}    memcpy( data + {{offset}}, (char*){{take}}builder_data->{{field}}, {{width}} ) ;
{{/is_composite}}{{/is_fixed}}{{/fields}}

{{#fields}}{{#is_fixed}}{{#is_composite}}    build_{{typeName}}( data + {{offset}},  length - {{offset}}, builder_data->{{field}} ) ;
{{/is_composite}}{{/is_fixed}}{{/fields}}


{{#fields}}{{^is_fixed}}
    if ( length < current_offset + builder_data->{{field}}_length )
        return 0 ;

{{#is_composite}}    build_{{typeName}}( data + {{offset}},  length - {{offset}}, builder_data->{{field}} ) ;
{{/is_composite}}
{{^is_composite}}    memcpy( data + current_offset, (char*)builder_data->{{field}}, builder_data->{{field}}_length ) ;
    current_offset += builder_data->{{field}}_length ;
{{/is_composite}}

    ((uint32_t*)data)[ {{index}} ] = current_offset ;
{{/is_fixed}}{{/fields}}

    return current_offset;
}

{{/types}}

static inline size_t build_TaggedField ( char* data, size_t length, struct TaggedField_builder* builder_data ) {

    if ( length < 8 )
        return 0 ;

    size_t wrote ;

    memcpy( data, (char*)&builder_data->tag, sizeof( uint64_t ) ) ;

    switch( builder_data->tag ) {
{{#types}}

       case 0x{{tag}} :
           wrote = build_{{message}}( data + sizeof( uint64_t ),  length - sizeof( uint64_t ), (struct {{message}}_builder*)builder_data->data ) ;
           break ;
{{/types}}

       default:
           wrote = 0 ;
           break ;
   }

   if ( wrote > 0 )
       wrote += sizeof( uint64_t ) ;

   return wrote ;
}

size_t static inline compute_TaggedField_length ( struct TaggedField_builder* builder_data ) {

    size_t length ;

    switch( builder_data->tag ) {
{{#types}}

       case 0x{{tag}} :
           length = compute_{{message}}_length( (struct {{message}}_builder*)builder_data->data ) ;
           break ;
{{/types}}
       default:
           length = 0 ;
           break ;
   }

   if ( length > 0 )
       length += sizeof( uint64_t ) ;

   return length ;
}

#endif /* MESSAGE_IMPLMENTATION_H  */
